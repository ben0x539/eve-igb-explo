<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Exploration Log</title>
    <script type="text/javascript"><![CDATA[
      var check_form, check_input, check_output, check_current
      var log_form, log_password, log_id_letters, log_id_digits,
        log_type, log_name, log_output, log_current
      function send_request(type, target, success, error, data) {
      }

      function removeChildren(r) {
        var child
        while ((child = r.firstChild))
          r.removeChild(child)
      }

      function checkSetOutput(obj) {
        check_output.parentNode.replaceChild(obj, check_output)
        check_output = obj
        obj.setAttribute("id", "check-output")
      }

      function checkSetOutputText(str) {
        var p = document.createElement("p")
        p.appendChild(document.createTextNode(str))
        checkSetOutput(p)
      }

      function logSetOutput(obj) {
        log_output.parentNode.replaceChild(obj, log_output)
        log_output = obj
        obj.setAttribute("id", "log-output")
      }

      function logSetOutputText(str) {
        var p = document.createElement("p")
        p.appendChild(document.createTextNode(str))
        logSetOutput(p)
      }

      function formatTime(time) {
        time = new Date(time * 1000)
        function pad(n){return n<10 ? '0'+n : n}
        return time.getFullYear() +
               "-" + pad(time.getMonth()+1) +
               "-" + pad(time.getDate()) +
               " " + pad(time.getHours()) + 
               ":" + pad(time.getMinutes())
      }

      function onCheckResponse(response) {
        removeChildren(check_output)
        check_input.value = ""
        var results = JSON.parse(response)
        if (results.length == 0) {
          checkSetOutputText("no results")
        } else {
          var div = document.createElement("div")
          var btn = document.createElement("button")
          btn.appendChild(document.createTextNode("Clear results"))
          btn.addEventListener("click", function(e) {
            checkSetOutput(document.createElement("p"))
          })
          div.appendChild(btn)
          var table = document.createElement("table")
          table.setAttribute("class", "siglist")
          var tr = document.createElement("tr"); // heh
          ["Time", "System", "ID", "Type", "Name"].forEach(function(str) {
            var th = document.createElement("th")
            th.appendChild(document.createTextNode(str))
            tr.appendChild(th)
          })
          table.appendChild(tr)
          for (var i = 0; i < results.length; ++i) {
            var item = results[i]
            item.time = formatTime(item.time)
            tr = document.createElement("tr")
            if (item.current)
              tr.setAttribute("class", "sig-current-system")
            delete item.current; // welp
            ["time", "system", "id", "type", "name"].forEach(function(str) {
              var td = document.createElement("td")
              td.appendChild(document.createTextNode(item[str]))
              td.setAttribute("class", "sig" + str)
              tr.appendChild(td)
            })
            table.appendChild(tr)
          }
          div.appendChild(table)
          checkSetOutput(div)
        }
      }

      function onCheckSubmit(e) {
        e.preventDefault()
        removeChildren(check_output)
        checkSetOutputText("Querying...")
        if (check_current)
          check_current.abort()
        var r = check_current = new XMLHttpRequest()
        r.open("GET", "http://londeroth.org/~ben/eve.cgi/check?format=json&sig-id=" + check_input.value)
        r.onreadystatechange = function(e) {
          if (r.readyState != 4)
            return;
          removeChildren(check_output)
          if (r.status == 200) {
            onCheckResponse(r.responseText)
          } else {
            var pre = document.createElement("pre")
            pre.appendChild(document.createTextNode(
                "Error: " + r.statusText + ": " + r.responseText))
            checkSetOutput(pre)
          }
        }
        r.send(null)
      }

      function onLogResponse(text) {
        logSetOutputText(text)
        
        log_id_letters.value = ""
        log_id_digits.value = ""
        log_type.value = "unknown"
        log_name.value = ""
      }

      function onLogSubmit(e) {
        e.preventDefault()
        removeChildren(log_output)
        logSetOutputText("Submitting...")
        if (log_current)
          log_current.abort()
        var r = log_current = new XMLHttpRequest()
        r.open("POST", "http://londeroth.org/~ben/eve.cgi/log/")
        r.onreadystatechange = function(e) {
          if (r.readyState != 4)
            return;
          removeChildren(log_output)
          if (r.status == 200) {
            onLogResponse(r.responseText)
          } else {
            var pre = document.createElement("pre")
            pre.appendChild(document.createTextNode(
                "Error: " + r.statusText + ": " + r.responseText))
            logSetOutput(pre)
          }
        }
        var e = encodeURIComponent
        r.send(
          "password=" + e(log_password.value) +
          "&sig-id-letters=" + e(log_id_letters.value) +
          "&sig-id-digits=" + e(log_id_digits.value) +
          "&sig-type=" + e(log_type.value) +
          "&sig-name=" + e(log_name.value))
      }

      function go() {
        if (window.CCPEVE) {
          // would limit to /~ben/, but looks like the igb chokes on ~
          CCPEVE.requestTrust("http://londeroth.org/")
        }

        var noscript = document.getElementById("noscript")
        noscript.parentNode.removeChild(noscript)

        check_form = document.getElementById("check-form")
        check_input = document.getElementById("check-input")
        check_output = document.getElementById("check-output")
        check_form.addEventListener("submit", onCheckSubmit)

        log_form = document.getElementById("log-form")
        log_password = document.getElementById("log-password")
        log_id_letters = document.getElementById("log-id-letters")
        log_id_digits = document.getElementById("log-id-digits")
        log_type = document.getElementById("log-type")
        log_name = document.getElementById("log-name")
        log_output = document.getElementById("log-output")
        log_form.addEventListener("submit", onLogSubmit)
      }
    ]]></script>
    <style type="text/css"><![CDATA[
      body {
        background-color:   #ddd;
      }

      .section {
        background-color:   white;
        border:             2px solid grey;
        margin:             1em;
        padding:            1em;
      }

      .section h2 {
        margin-top:         0;
        border-bottom:      1px solid grey;
      }

      input[name="sig-id-letters"], input[name="sig-id-digits"] {
        font-family:        monospace;
      }

      table.siglist .sig-current-system {
        font-weight:        bold;
      }

      table.siglist th {
        text-align:         left;
      }

      table.siglist td {
        background-color:   #eee;
      }
      
      table.siglist .sigsystem, table.siglist .sigid {
        font-family:        monospace;
      }
    ]]></style>
  </head>
  <body onload="go()">
    <h1>Exploration logging tool</h1>
    <p id="noscript">JavaScript is recommended.</p>
    <div class="section"> <!-- welp -->
      <h2>Check signature IDs</h2>
      <form id="check-form" method="get" action="eve.cgi/check">
        <p>
          <input type="text" id="check-input" name="sig-id" size="9" />
          <input type="submit" />
        </p>
      </form>
      <p id="check-output" />
    </div>
    <div class="section">
      <h2>Log signature</h2>
      <form id="log-form" method="post" action="eve.cgi/log">
        <p>
          Password: <input type="password" size="12"
                           name="password" id="log-password" />
        </p>
        <p>
          <input type="text" size="3" maxlength="3"
                 name="sig-id-letters" id="log-id-letters"
            />-<input type="text" size="3" maxlength="3"
                      name="sig-id-digits" id="log-id-digits" />
          <select name="sig-type" id="log-type">
            <option value="Unknown">Unknown</option>
            <option value="Gravimetric">Gravimetric</option>
            <option value="Magnetometric">Magnetometric</option>
            <option value="Radar">Radar</option>
            <option value="Ladar">Ladar</option>
          </select>
          <input type="text" size="40" name="sig-name" id="log-name" />
          <input type="submit" />
        </p>
        <p id="log-output" />
      </form>
    </div>
  </body>
</html>
